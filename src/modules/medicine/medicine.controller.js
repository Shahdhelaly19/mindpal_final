import { Medicine } from "../../../databases/models/medicine.model.js";
import { Patient } from "../../../databases/models/patient.model.js";
import { Doctor } from "../../../databases/models/doctor.models.js";
import { catchError } from "../../middleware/catchError.js";
import { AppError } from "../../utils/appError.js";
import { sendNotification } from "../../utils/sendNotification.js";
import { createRemindersForMedicine } from "../reminder/reminder.utils.js";
import moment from "moment-timezone";

export const updateMedicine = catchError(async(req , res , next) => {

   const  medicine = await Medicine.findByIdAndUpdate(
        req.params.id,
        req.body,
        {new:true}
    )

    res.status(200).json({
    message: "Medication updated successfully",
    medication: medicine,
  });
    
})


export const deleteMedicine = catchError(async(req , res , next) => {
 
    const medicine = await Medicine.findByIdAndUpdate(req.params.id ,{confirm:false})
    res.status(200).json({
    message: "Medication deleted successfully",
  });
    
})



export const addMedicine = catchError(async (req, res, next) => {
  // âœ… 1. Ø§Ù„ØªØ£ÙƒØ¯ Ù…Ù† Ø§Ù„Ù…Ø±ÙŠØ¶
  let patient = await Patient.findOne({ code: req.body.code });
  if (!patient || patient.role !== "patient") {
    return next(new AppError("Patient code is required", 400));
  }

  // âœ… 2. Ø§Ø³ØªØ®Ø±Ø§Ø¬ Ø¨ÙŠØ§Ù†Ø§Øª Ø§Ù„Ø¯ÙˆØ§Ø¡ Ù…Ù† Ø§Ù„Ù€ body
  const {
    name,
    dosage,
    pillsPerDay,
    timeToTake,
    schedule,
    type,
    numPottle,
    startDate,
    endDate,
    intervalDays,
  } = req.body;

  // âœ… 3. Ø¥Ù†Ø´Ø§Ø¡ Ø§Ù„Ø¯ÙˆØ§Ø¡
  const newMed = await Medicine.create({
    name,
    dosage,
    pillsPerDay,
    timeToTake,
    schedule,
    type,
    numPottle,
    startDate,
    endDate,
    intervalDays,
    prescribedTo: patient._id
  });

  // âœ… 4. Ø¥Ø±Ø³Ø§Ù„ Ø¥Ø´Ø¹Ø§Ø± Ù„Ù„Ø¯ÙƒØªÙˆØ± Ù„Ùˆ Ù…ÙˆØ¬ÙˆØ¯
  const doctor = await Doctor.findById(patient.doctorId);
  if (doctor?.deviceTokens) {
    await sendNotification(
      doctor.deviceTokens,
      "ðŸ’Š New Prescription Added",
      `A new medicine (${newMed.name}) was prescribed to patient (${patient.name}).`
    );
  }

  // âœ… 5. ØªÙˆÙ„ÙŠØ¯ Ø§Ù„Ø±ÙŠÙ…Ø§ÙŠÙ†Ø¯Ø±Ø§Øª ØªÙ„Ù‚Ø§Ø¦ÙŠÙ‹Ø§
  const createdReminders = await createRemindersForMedicine(newMed, patient, req.user?.userId);

  // âœ… 6. ØªÙ†Ø³ÙŠÙ‚ Ø§Ù„Ø£ÙˆÙ‚Ø§Øª Ù„ØªÙˆÙ‚ÙŠØª Ø§Ù„Ù‚Ø§Ù‡Ø±Ø©
  const formattedReminders = createdReminders.map(rem => ({
    _id: rem._id,
    patientId: rem.patientId,
    medicineId: rem.medicineId,
    time: moment(rem.time).tz("Africa/Cairo").format("YYYY-MM-DD HH:mm"),
    createdBy: rem.createdBy,
  }));

  // âœ… 7. Ø§Ù„Ø±Ø¯ Ø¨Ø§Ù„Ù†ØªÙŠØ¬Ø©
  res.status(201).json({
    message: `âœ… Medication added successfully with ${createdReminders.length} reminder(s) generated.`,
    medication: newMed,
    reminderCount: createdReminders.length,
    reminders: formattedReminders
  });
});

export const getMedicinesByPatient = catchError(async (req, res, next) => {
  const { patientId } = req.params;

  const medicines = await Medicine.find({ prescribedTo: patientId });

  res.status(200).json({
    message: "âœ… Medicines for patient retrieved successfully",
    medicines,
  });
});